{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/main.js","js/models/order.js","js/controllers/orders.js","js/models/product.js","js/controllers/products.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isSeller","getPayload","role","payload","isLoggedIn","$on","Order","$resource","id","update","method","OrdersIndexController","Product","User","deleteOrder","order","orderQuantity","quantity","product","console","log","current_quantity","delete","index","ordersIndex","all","indexOf","splice","updatedProduct","showOrders","showOrderList","toggleEditForm","showEditFormValue","query","buyer_id","get","$promise","data","currentUser","OrdersNewController","create","save","ordersNew","product_id","params","ProductsIndexController","productsIndex","ProductsNewController","productsNew","ProductsShowController","deleteProduct","productsShow","$remove","createOrder","orderSaved","userId","maxOrderRatio","isOwnProduct","maxOrderSize","seller","ProductsEditController","productsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('productsIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n  const payload = $auth.getPayload();\n  const user = payload;\n  main.user = user;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n    // Check whether or not the current user is a seller\n    if($auth.isAuthenticated()){\n      main.isSeller = $auth.getPayload().role === 'seller';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Order', Order);\n\nOrder.$inject = ['$resource', 'API_URL'];\nfunction Order($resource, API_URL) {\n  return new $resource(`${API_URL}/orders/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('OrdersIndexController', OrdersIndexController)\n.controller('OrdersNewController', OrdersNewController);\n// .controller('OrdersShowController', OrdersShowController);\n// .controller('OrdersEditController', OrdersEditController);\n\n//INDEX\nOrdersIndexController.$inject = ['Product','User','Order', '$state', '$auth'];\nfunction OrdersIndexController(Product, User, Order, $state, $auth) {\n  const ordersIndex = this;\n  const payload = $auth.getPayload();\n  const user = payload;\n  ordersIndex.user = user;\n\n  ordersIndex.showEditFormValue = false;\n\n  ordersIndex.all = Order.query({ buyer_id: $auth.getPayload().id });\n\n  User.get({id: user.id}).$promise.then((data) => {\n    ordersIndex.currentUser = data;\n  });\n\n  function deleteOrder(order) {\n    const orderQuantity = order.quantity;\n    const product = order.product;\n\n    console.log('Before deleted order; product.current_quantity:', product.current_quantity);\n    console.log('orderQuantity:', orderQuantity);\n    Order.delete({id: order.id}, () => {\n      const index = ordersIndex.all.indexOf(order);\n      ordersIndex.all.splice(index, 1);\n      product.current_quantity -= orderQuantity;\n      Product.update({id: product.id}, product, (updatedProduct) => {\n        console.log('After deleted order; updatedProduct.current_quantity:', updatedProduct.current_quantity);\n        $state.go('ordersIndex');\n      });\n    });\n  }\n\n  function update(order) {\n    Order.update({id: order.id}, order, () => {\n      $state.go('ordersIndex');\n    });\n  }\n\n  function showOrders(product) {\n    console.log('clicked');\n    console.log(product);\n    product.showOrderList = !product.showOrderList;\n  }\n\n  function toggleEditForm(order) {\n    console.log('clicked');\n    order.showEditFormValue = !order.showEditFormValue;\n  }\n\n  ordersIndex.showOrders = showOrders;\n  ordersIndex.delete = deleteOrder;\n  ordersIndex.update = update;\n  ordersIndex.toggleEditForm = toggleEditForm;\n}\n\n//NEW\nOrdersNewController.$inject = ['Product','Order', '$state'];\nfunction OrdersNewController(Product, Order, $state) {\n  const ordersNew = this;\n\n  ordersNew.order = {};\n  ordersNew.order.product_id = $state.params.id;\n\n  function create() {\n    // const payload = $auth.getPayload();\n\n    Order.save(ordersNew.order, () => {\n      $state.go('ordersIndex');\n    });\n  }\n  ordersNew.create = create;\n}\n","angular.module('finalProject')\n  .factory('Product', Product);\n\nProduct.$inject = ['$resource', 'API_URL'];\nfunction Product($resource, API_URL) {\n  return new $resource(`${API_URL}/products/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ProductsIndexController', ProductsIndexController)\n.controller('ProductsNewController', ProductsNewController)\n.controller('ProductsShowController', ProductsShowController)\n.controller('ProductsEditController', ProductsEditController);\n\n//INDEX\nProductsIndexController.$inject = ['Product'];\nfunction ProductsIndexController(Product) {\n  const productsIndex = this;\n\n  productsIndex.all = Product.query();\n}\n\n//NEW\nProductsNewController.$inject = ['Product', '$state','$auth'];\nfunction ProductsNewController(Product, $state, $auth) {\n  const productsNew = this;\n\n  productsNew.product = {};\n\n  function create() {\n    const payload = $auth.getPayload();\n    console.log('fired');\n    console.log(payload);\n\n    Product.save(productsNew.product, () => {\n      $state.go('productsIndex');\n    });\n  }\n  productsNew.create = create;\n}\n\n//SHOW & DELETE\nProductsShowController.$inject = ['Product', 'Order', '$state', '$auth'];\nfunction ProductsShowController(Product, Order, $state, $auth) {\n  const productsShow = this;\n  const payload = $auth.getPayload();\n  const userId = payload.id;\n  const maxOrderRatio = .20;\n  console.log(userId);\n  productsShow.isOwnProduct = false;\n\n  Product.get($state.params).$promise.then((data) => {\n    productsShow.product = data;\n    console.log(productsShow.product);\n    const maxOrderSize = (productsShow.product.quantity)*(maxOrderRatio);\n    productsShow.maxOrderSize = maxOrderSize;\n    productsShow.order.quantity = maxOrderSize;\n    console.log(maxOrderSize);\n    if(productsShow.product.seller.id === userId) {\n      productsShow.isOwnProduct = true;\n      console.log(productsShow.product.seller.id);\n      console.log(productsShow.isOwnProduct);\n    }\n  });\n\n  function deleteProduct() {\n    console.log('fired!');\n    productsShow.product.$remove({id: productsShow.product.id}, () => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsShow.delete = deleteProduct;\n  productsShow.isLoggedIn = $auth.isAuthenticated;\n\n  productsShow.order = {\n    product_id: $state.params.id\n  };\n\n  function createOrder() {\n    Order.save(productsShow.order, (orderSaved) => {\n      productsShow.product.current_quantity += orderSaved.quantity;\n      Product.update({id: productsShow.product.id}, productsShow.product, () => {\n        $state.go('ordersIndex');\n      });\n    });\n  }\n\n  productsShow.createOrder = createOrder;\n}\n\n//EDIT CONTROLLER\nProductsEditController.$inject = ['Product','$state', '$auth'];\nfunction ProductsEditController(Product, $state, $auth) {\n  const productsEdit = this;\n\n  productsEdit.product = Product.get($state.params);\n\n  function update() {\n    Product.update({id: productsEdit.product.id}, productsEdit.product, () => {\n      $state.go('productsShow', $state.params);\n    });\n  }\n\n  productsEdit.update = update;\n  productsEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n\n  //User, Register and Login Routes\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n\n  //Product Routes\n    .state('productsIndex', {\n      url: '/products',\n      templateUrl: '/templates/productsIndex.html',\n      controller: 'ProductsIndexController as productsIndex'\n    })\n    .state('productsNew', {\n      url: '/products/new',\n      templateUrl: '/templates/productsNew.html',\n      controller: 'ProductsNewController as productsNew'\n    })\n    .state('productsShow', {\n      url: '/products/:id',\n      templateUrl: '/templates/productsShow.html',\n      controller: 'ProductsShowController as productsShow'\n    })\n    .state('productsEdit', {\n      url: '/products/:id/edit',\n      templateUrl: '/templates/productsEdit.html',\n      controller: 'ProductsEditController as productsEdit'\n    })\n\n  //Order Routes\n    .state('ordersIndex', {\n      url: '/orders',\n      templateUrl: '/templates/ordersIndex.html',\n      controller: 'OrdersIndexController as ordersIndex'\n    })\n    .state('ordersNew', {\n      url: '/orders/new',\n      templateUrl: '/templates/ordersNew.html',\n      controller: 'OrdersNewController as ordersNew'\n    });\n    // .state('ordersShow', {\n    //   url: '/orders/:id',\n    //   templateUrl: '/templates/ordersShow.html',\n    //   controller: 'OrdersShowController as ordersShow'\n    // });\n\n  $urlRouterProvider.otherwise('/products');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User','$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('productsIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User','$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update({id: usersEdit.user.id}, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n  usersEdit.isLoggedIn = $auth.isAuthenticated;\n}\n"]}