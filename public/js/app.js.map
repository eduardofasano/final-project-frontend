{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/main.js","js/models/order.js","js/controllers/orders.js","js/helpers/priceHelper.js","js/models/product.js","js/controllers/products.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isSeller","getPayload","role","payload","isLoggedIn","$on","Order","$resource","id","update","method","OrdersIndexController","Product","User","PriceHelper","plusOne","order","console","log","quantity","minusOne","deleteOrder","orderQuantity","product","current_quantity","delete","index","ordersIndex","all","indexOf","splice","final_price","calculateCurrentPricePerUnit","min_price","max_price","updatedProduct","get","$promise","data","orderId","originalQuantity","originalCurrentQuantity","showOrders","showOrderList","toggleEditForm","showEditFormValue","query","buyer_id","orders","forEach","currentUser","OrdersNewController","create","save","ordersNew","product_id","params","minPrice","maxPrice","totalQuantity","currentQuantity","ProductsIndexController","productsIndex","queryString","filter","ProductsNewController","productsNew","ProductsShowController","$window","checkForOrders","buyerIds","productsShow","map","buyer","deleteProduct","$remove","createOrder","orderSaved","userId","maxOrderRatio","maxOrderSize","seller","isOwnProduct","countdown","moment","diff","enddate","ProductsEditController","productsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer', 'timer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('productsIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n  const payload = $auth.getPayload();\n  const user = payload;\n  main.user = user;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n    // Check whether or not the current user is a seller\n    if($auth.isAuthenticated()){\n      main.isSeller = $auth.getPayload().role === 'seller';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Order', Order);\n\nOrder.$inject = ['$resource', 'API_URL'];\nfunction Order($resource, API_URL) {\n  return new $resource(`${API_URL}/orders/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('OrdersIndexController', OrdersIndexController)\n.controller('OrdersNewController', OrdersNewController);\n\n//INDEX\nOrdersIndexController.$inject = ['Product','User','Order', '$state', '$auth', 'PriceHelper'];\nfunction OrdersIndexController(Product, User, Order, $state, $auth, PriceHelper) {\n  const ordersIndex = this;\n  const payload = $auth.getPayload();\n  const user = payload;\n  ordersIndex.user = user;\n\n  ordersIndex.showEditFormValue = false;\n\n  ordersIndex.all = Order.query({ buyer_id: $auth.getPayload().id });\n\n  ordersIndex.all.$promise.then((orders) => {\n    console.log('orders:', orders);\n    orders.forEach(order => {\n      order.originalQuantity = order.quantity;\n    });\n  });\n\n  User.get({id: user.id}).$promise.then((data) => {\n    ordersIndex.currentUser = data;\n  });\n\n  function plusOne(order) {\n    console.log('clicked, add one');\n    order.quantity++;\n    console.log(order.quantity);\n  }\n\n  function minusOne(order) {\n    console.log('clicked, add one');\n    order.quantity--;\n    console.log(order.quantity);\n  }\n\n  function deleteOrder(order) {\n    const orderQuantity = order.quantity;\n    const product = order.product;\n\n    console.log('Before deleted order; product.current_quantity:', product.current_quantity);\n    console.log('orderQuantity:', orderQuantity);\n    Order.delete({id: order.id}, () => {\n      const index = ordersIndex.all.indexOf(order);\n      ordersIndex.all.splice(index, 1);\n      product.current_quantity -= orderQuantity;\n      console.log('BEFORE product.final_price:', product.final_price);\n\n      product.final_price = PriceHelper.calculateCurrentPricePerUnit(\n        product.min_price,\n        product.max_price,\n        product.quantity,\n        product.current_quantity\n      );\n      console.log('  product.min_price:', product.min_price);\n      console.log('  product.max_price:', product.max_price);\n      console.log('  product.quantity:', product.quantity);\n      console.log('  product.current_quantity:', product.current_quantity);\n      console.log('AFTER product.final_price:', product.final_price);\n\n      Product.update({id: product.id}, product, (updatedProduct) => {\n        console.log('After deleted order; updatedProduct.current_quantity:', updatedProduct.current_quantity);\n        $state.go('ordersIndex');\n      });\n    });\n  }\n\n  function update(order) {\n    Order.get({id: order.id}).$promise.then((data) => {\n      ordersIndex.orderId = data.id;\n      console.log('order.originalQuantity: ', order.originalQuantity);\n\n      Product.get({id: order.product.id}).$promise.then((product) => {\n        ordersIndex.orderId = product.id;\n        const originalCurrentQuantity = (product.current_quantity);\n        console.log('originalCurrentQuantity: ', originalCurrentQuantity);\n        console.log('editedOrderedQuantity: ', order.quantity);\n\n        product.current_quantity = (originalCurrentQuantity - order.originalQuantity + order.quantity);\n        console.log('edited current quantity', product.current_quantity);\n\n        Order.update({id: order.id}, order, () => {\n          console.log('BEFORE product.final_price:', product.final_price);\n          product.final_price = PriceHelper.calculateCurrentPricePerUnit(\n            product.min_price,\n            product.max_price,\n            product.quantity,\n            product.current_quantity\n          );\n          console.log('  product.min_price:', product.min_price);\n          console.log('  product.max_price:', product.max_price);\n          console.log('  product.quantity:', product.quantity);\n          console.log('  product.current_quantity:', product.current_quantity);\n          console.log('AFTER product.final_price:', product.final_price);\n          Product.update({id: product.id}, product, (updatedProduct) => {\n            console.log('updatedProduct.current_quantity:', updatedProduct.current_quantity);\n            console.log('updatedProduct.final_price:', updatedProduct.final_price);\n          });\n          $state.go('ordersIndex');\n        });\n      });\n    });\n  }\n\n  function showOrders(product) {\n    console.log('clicked');\n    console.log(product);\n    product.showOrderList = !product.showOrderList;\n  }\n\n  function toggleEditForm(order) {\n    console.log('clicked');\n    order.showEditFormValue = !order.showEditFormValue;\n  }\n\n  ordersIndex.showOrders = showOrders;\n  ordersIndex.plusOne = plusOne;\n  ordersIndex.minusOne = minusOne;\n  ordersIndex.delete = deleteOrder;\n  ordersIndex.update = update;\n  ordersIndex.toggleEditForm = toggleEditForm;\n}\n\n//NEW\nOrdersNewController.$inject = ['Product','Order', '$state'];\nfunction OrdersNewController(Product, Order, $state) {\n  const ordersNew = this;\n\n  ordersNew.order = {};\n  ordersNew.order.product_id = $state.params.id;\n\n  function create() {\n    // const payload = $auth.getPayload();\n\n    Order.save(ordersNew.order, () => {\n      $state.go('ordersIndex');\n    });\n  }\n  ordersNew.create = create;\n}\n","angular.module('finalProject')\n  .factory('PriceHelper', PriceHelper);\n\nfunction PriceHelper() {\n  return {\n    calculateCurrentPricePerUnit: (minPrice, maxPrice, totalQuantity, currentQuantity) => {\n      return (((minPrice - maxPrice)/(totalQuantity - 0)) * currentQuantity) + maxPrice;\n    }\n  };\n}\n","angular.module('finalProject')\n  .factory('Product', Product);\n\nProduct.$inject = ['$resource', 'API_URL'];\nfunction Product($resource, API_URL) {\n  return new $resource(`${API_URL}/products/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ProductsIndexController', ProductsIndexController)\n.controller('ProductsNewController', ProductsNewController)\n.controller('ProductsShowController', ProductsShowController)\n.controller('ProductsEditController', ProductsEditController);\n\n//INDEX\nProductsIndexController.$inject = ['Product'];\nfunction ProductsIndexController(Product) {\n  const productsIndex = this;\n\n  productsIndex.all = Product.query();\n  productsIndex.queryString = '';\n\n  productsIndex.filter = { name: ''};\n}\n\n//NEW\nProductsNewController.$inject = ['Product', '$state','$auth'];\nfunction ProductsNewController(Product, $state, $auth) {\n  const productsNew = this;\n\n  productsNew.product = {};\n\n  function create() {\n    const payload = $auth.getPayload();\n    console.log('fired');\n    console.log(payload);\n\n    Product.save(productsNew.product, () => {\n      $state.go('productsIndex');\n    });\n  }\n  productsNew.create = create;\n}\n\n//SHOW & DELETE\nProductsShowController.$inject = ['Product', 'Order', '$state', '$auth', 'PriceHelper', '$window'];\nfunction ProductsShowController(Product, Order, $state, $auth, PriceHelper, $window) {\n  const productsShow = this;\n  const payload = $auth.getPayload();\n  const userId = payload.id;\n  const maxOrderRatio = .20;\n  console.log(userId);\n  // productsShow.isOwnProduct = false;\n  productsShow.product = null;\n  Product.get($state.params).$promise.then((data) => {\n    productsShow.product = data;\n    console.log(productsShow.product.orders);\n\n    const maxOrderSize = (productsShow.product.quantity)*(maxOrderRatio);\n    productsShow.maxOrderSize = maxOrderSize;\n    // productsShow.countdown = parseInt(productsShow.product.duration)*60*60;\n    productsShow.order.quantity = 1;\n    console.log(maxOrderSize);\n\n    if(productsShow.product.seller.id === userId) {\n      productsShow.isOwnProduct = true;\n      console.log(productsShow.product.seller.id);\n      console.log(productsShow.isOwnProduct);\n    }\n\n    //TIME CALCULATION\n    productsShow.countdown = $window.moment().diff(new $window.moment(productsShow.product.enddate))*-1/1000;\n    // productsShow.countdown = 0;\n    console.log(productsShow.countdown);\n\n  });\n\n  function checkForOrders() {\n    const buyerIds = productsShow.product.orders.map((order) => {\n      return order.buyer.id;\n    });\n\n    return buyerIds.includes(payload.id);\n  }\n\n  function plusOne() {\n    console.log('clicked, add one');\n    productsShow.order.quantity++;\n    console.log(productsShow.order.quantity);\n  }\n\n  function minusOne() {\n    console.log('clicked, add one');\n    productsShow.order.quantity--;\n    console.log(productsShow.order.quantity);\n  }\n\n  function deleteProduct() {\n    console.log('fired!');\n    productsShow.product.$remove({id: productsShow.product.id}, () => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsShow.order = {\n    product_id: $state.params.id\n  };\n\n  function createOrder() {\n    Order.save(productsShow.order, (orderSaved) => {\n      productsShow.product.current_quantity += orderSaved.quantity;\n      productsShow.product.final_price = PriceHelper.calculateCurrentPricePerUnit(\n        productsShow.product.min_price,\n        productsShow.product.max_price,\n        productsShow.product.quantity,\n        productsShow.product.current_quantity\n      );\n      Product.update({id: productsShow.product.id}, productsShow.product, () => {\n        $state.go('ordersIndex');\n      });\n    });\n  }\n\n  productsShow.checkForOrders = checkForOrders;\n  productsShow.plusOne = plusOne;\n  productsShow.minusOne = minusOne;\n  productsShow.delete = deleteProduct;\n  productsShow.isLoggedIn = $auth.isAuthenticated;\n  productsShow.createOrder = createOrder;\n}\n\n//EDIT CONTROLLER\nProductsEditController.$inject = ['Product','$state', '$auth'];\nfunction ProductsEditController(Product, $state, $auth) {\n  const productsEdit = this;\n\n  productsEdit.product = Product.get($state.params);\n\n  function update() {\n    Product.update({id: productsEdit.product.id}, productsEdit.product, () => {\n      $state.go('productsShow', $state.params);\n    });\n  }\n\n  productsEdit.update = update;\n  productsEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n\n  //User, Register and Login Routes\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n\n  //Product Routes\n    .state('productsIndex', {\n      url: '/products',\n      templateUrl: '/templates/productsIndex.html',\n      controller: 'ProductsIndexController as productsIndex'\n    })\n    .state('productsNew', {\n      url: '/products/new',\n      templateUrl: '/templates/productsNew.html',\n      controller: 'ProductsNewController as productsNew'\n    })\n    .state('productsShow', {\n      url: '/products/:id',\n      templateUrl: '/templates/productsShow.html',\n      controller: 'ProductsShowController as productsShow'\n    })\n    .state('productsEdit', {\n      url: '/products/:id/edit',\n      templateUrl: '/templates/productsEdit.html',\n      controller: 'ProductsEditController as productsEdit'\n    })\n\n  //Order Routes\n    .state('ordersIndex', {\n      url: '/orders',\n      templateUrl: '/templates/ordersIndex.html',\n      controller: 'OrdersIndexController as ordersIndex'\n    })\n    .state('ordersNew', {\n      url: '/orders/new',\n      templateUrl: '/templates/ordersNew.html',\n      controller: 'OrdersNewController as ordersNew'\n    });\n\n  $urlRouterProvider.otherwise('/products');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User','$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('productsIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User','$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update({id: usersEdit.user.id}, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n  usersEdit.isLoggedIn = $auth.isAuthenticated;\n}\n"]}