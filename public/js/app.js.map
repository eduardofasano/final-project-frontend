{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/main.js","js/models/order.js","js/controllers/orders.js","js/models/product.js","js/controllers/products.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isSeller","getPayload","role","isLoggedIn","$on","Order","$resource","id","update","method","OrdersIndexController","ordersIndex","all","query","OrdersNewController","create","payload","console","log","save","ordersNew","order","addOrder","product_id","params","OrdersShowController","deleteOrder","ordersShow","$remove","userId","get","delete","Product","ProductsIndexController","productsIndex","ProductsNewController","productsNew","product","ProductsShowController","deleteProduct","productsShow","isOwnProduct","$promise","data","seller","ProductsEditController","productsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n    // Check whether or not the current user is a seller\n    if($auth.isAuthenticated()){\n      main.isSeller = $auth.getPayload().role === 'seller';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Order', Order);\n\nOrder.$inject = ['$resource', 'API_URL'];\nfunction Order($resource, API_URL) {\n  return new $resource(`${API_URL}/orders/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('OrdersIndexController', OrdersIndexController)\n.controller('OrdersNewController', OrdersNewController);\n// .controller('OrdersShowController', OrdersShowController)\n// .controller('OrdersEditController', OrdersEditController);\n\n//INDEX\nOrdersIndexController.$inject = ['Order'];\nfunction OrdersIndexController(Order) {\n  const ordersIndex = this;\n\n  ordersIndex.all = Order.query();\n}\n\n//NEW\nOrdersNewController.$inject = ['Order', '$state','$auth'];\nfunction OrdersNewController(Order, $state, $auth) {\n  const ordersNew = this;\n\n  ordersNew.order = {};\n  ordersNew.order.product_id = $state.params.id;\n\n  function create() {\n    const payload = $auth.getPayload();\n    console.log('fired');\n    console.log(payload);\n\n\n\n    Order.save(ordersNew.order, () => {\n      $state.go('ordersShow');\n    });\n  }\n\n  function addOrder() {\n    console.log('give me some cheese!');\n  }\n\n  ordersNew.create = create;\n  ordersNew.addOrder = addOrder;\n}\n\n//SHOW & DELETE\nOrdersShowController.$inject = ['Order','$state', '$auth'];\nfunction OrdersShowController(Order, $state, $auth) {\n  const ordersShow = this;\n  const payload = $auth.getPayload();\n  const userId = payload.id ;\n  console.log(userId);\n\n  ordersShow.Order = Order.get($state.params);\n\n  function deleteOrder() {\n    console.log('fired!');\n    ordersShow.order.$remove({id: ordersShow.order.id}, () => {\n      $state.go('ordersIndex');\n    });\n  }\n\n  ordersShow.delete = deleteOrder;\n  ordersShow.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .factory('Product', Product);\n\nProduct.$inject = ['$resource', 'API_URL'];\nfunction Product($resource, API_URL) {\n  return new $resource(`${API_URL}/products/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ProductsIndexController', ProductsIndexController)\n.controller('ProductsNewController', ProductsNewController)\n.controller('ProductsShowController', ProductsShowController)\n.controller('ProductsEditController', ProductsEditController);\n\n//INDEX\nProductsIndexController.$inject = ['Product'];\nfunction ProductsIndexController(Product) {\n  const productsIndex = this;\n\n  productsIndex.all = Product.query();\n}\n\n//NEW\nProductsNewController.$inject = ['Product', '$state','$auth'];\nfunction ProductsNewController(Product, $state, $auth) {\n  const productsNew = this;\n\n  productsNew.product = {};\n\n  function create() {\n    const payload = $auth.getPayload();\n    console.log('fired');\n    console.log(payload);\n\n    Product.save(productsNew.product, () => {\n      $state.go('productsIndex');\n    });\n  }\n  productsNew.create = create;\n}\n\n//SHOW & DELETE\nProductsShowController.$inject = ['Product','$state', '$auth'];\nfunction ProductsShowController(Product, $state, $auth) {\n  const productsShow = this;\n  const payload = $auth.getPayload();\n  const userId = payload.id ;\n  console.log(userId);\n  productsShow.isOwnProduct = false;\n\n  Product.get($state.params).$promise.then((data) => {\n    productsShow.product = data;\n    console.log(productsShow.product);\n    if(productsShow.product.seller.id === userId) {\n      productsShow.isOwnProduct = true;\n      console.log(productsShow.product.seller.id);\n      console.log(productsShow.isOwnProduct);\n    }\n  });\n\n  function deleteProduct() {\n    console.log('fired!');\n    productsShow.product.$remove({id: productsShow.product.id}, () => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsShow.delete = deleteProduct;\n  productsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\n//EDIT CONTROLLER\nProductsEditController.$inject = ['Product','$state', '$auth'];\nfunction ProductsEditController(Product, $state, $auth) {\n  const productsEdit = this;\n\n  productsEdit.product = Product.get($state.params);\n\n  function update() {\n    Product.update({id: productsEdit.product.id}, productsEdit.product, () => {\n      $state.go('productsShow', $state.params);\n    });\n  }\n\n  productsEdit.update = update;\n  productsEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n\n  //User, Register and Login Routes\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n\n  //Product Routes\n    .state('productsIndex', {\n      url: '/products',\n      templateUrl: '/templates/productsIndex.html',\n      controller: 'ProductsIndexController as productsIndex'\n    })\n    .state('productsNew', {\n      url: '/products/new',\n      templateUrl: '/templates/productsNew.html',\n      controller: 'ProductsNewController as productsNew'\n    })\n    .state('productsShow', {\n      url: '/products/:id',\n      templateUrl: '/templates/productsShow.html',\n      controller: 'ProductsShowController as productsShow'\n    })\n    .state('productsEdit', {\n      url: '/products/:id/edit',\n      templateUrl: '/templates/productsEdit.html',\n      controller: 'ProductsEditController as productsEdit'\n    })\n\n  //Order Routes\n    .state('ordersIndex', {\n      url: '/orders',\n      templateUrl: '/templates/ordersIndex.html',\n      controller: 'OrdersIndexController as ordersIndex'\n    })\n    .state('ordersNew', {\n      url: '/orders/new',\n      templateUrl: '/templates/ordersNew.html',\n      controller: 'OrdersNewController as ordersNew'\n    })\n    .state('ordersShow', {\n      url: '/orders/:id',\n      templateUrl: '/templates/ordersShow.html',\n      controller: 'OrdersShowController as ordersShow'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User','$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User','$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update({id: usersEdit.user.id}, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n  usersEdit.isLoggedIn = $auth.isAuthenticated;\n}\n"]}