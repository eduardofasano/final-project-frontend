{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/main.js","js/models/product.js","js/controllers/products.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MainController","$rootScope","logout","secureState","e","toState","main","message","console","log","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","$on","Product","$resource","id","update","method","ProductsIndexController","productsIndex","all","query","ProductsShowController","deleteProduct","productsShow","product","$remove","get","params","delete","ProductsEditController","productsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    console.log(toState);\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Product', Product);\n\nProduct.$inject = ['$resource', 'API_URL'];\nfunction Product($resource, API_URL) {\n  return new $resource(`${API_URL}/products/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ProductsIndexController', ProductsIndexController)\n  .controller('ProductsShowController', ProductsShowController)\n  .controller('ProductsEditController', ProductsEditController);\n\nProductsIndexController.$inject = ['Product'];\nfunction ProductsIndexController(Product) {\n  const productsIndex = this;\n\n  productsIndex.all = Product.query();\n}\n\nProductsShowController.$inject = ['Product','$state', '$auth'];\nfunction ProductsShowController(Product, $state, $auth) {\n  const productsShow = this;\n\n  productsShow.product = Product.get($state.params);\n\n  function deleteProduct() {\n    productsShow.product.$remove(() => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsShow.delete = deleteProduct;\n  productsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nProductsEditController.$inject = ['Product','$state', '$auth'];\nfunction ProductsEditController(Product, $state, $auth) {\n  const productsEdit = this;\n\n  productsEdit.product = Product.get($state.params);\n\n  function update() {\n    Product.update({id: productsEdit.product.id}, productsEdit.product, () => {\n      $state.go('productsShow', $state.params);\n    });\n  }\n\n  productsEdit.update = update;\n  productsEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n\n  //User, Register and Login Routes\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n\n  //Product Routes\n    .state('productsIndex', {\n      url: '/products',\n      templateUrl: '/templates/productsIndex.html',\n      controller: 'ProductsIndexController as productsIndex'\n    })\n    .state('productsShow', {\n      url: '/products/:id',\n      templateUrl: '/templates/productsShow.html',\n      controller: 'ProductsShowController as productsShow'\n    })\n    .state('productsEdit', {\n      url: '/products/:id/edit',\n      templateUrl: '/templates/productsEdit.html',\n      controller: 'ProductsEditController as productsEdit'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User','$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User','$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update({id: usersEdit.user.id}, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n  usersEdit.isLoggedIn = $auth.isAuthenticated;\n}\n"]}