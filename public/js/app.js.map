{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/main.js","js/models/order.js","js/controllers/orders.js","js/models/product.js","js/controllers/products.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isSeller","getPayload","role","payload","isLoggedIn","$on","Order","$resource","id","update","method","OrdersIndexController","User","deleteOrder","order","delete","index","ordersIndex","all","indexOf","splice","updateOrder","console","log","showOrders","product","showOrderList","toggleEditForm","showEditFormValue","query","buyer_id","get","$promise","data","currentUser","OrdersNewController","create","save","ordersNew","product_id","params","Product","ProductsIndexController","productsIndex","ProductsNewController","productsNew","ProductsShowController","deleteProduct","productsShow","$remove","createOrder","userId","isOwnProduct","seller","ProductsEditController","productsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"YAKA,SAASA,MAAKC,EAAeC,GAC3BD,EAAcE,SAAcD,EAA5B,SACAD,EAAcG,UAAeF,EAA7B,YAEAD,EAAcI,YAAc,GCJ9B,QAASC,oBAAmBC,EAAOC,GAKjC,QAASC,KACPF,EAAMG,OAAOC,EAASC,MACnBC,KAAK,WACJL,EAAOM,GAAG,WAPhB,GAAMH,GAAWI,IAEjBJ,GAASC,QASTD,EAASF,OAASA,EAIpB,QAASO,iBAAgBT,EAAOC,GAK9B,QAASC,KACPF,EAAMU,MAAMA,EAAMC,aACfL,KAAK,WACJL,EAAOM,GAAG,mBAPhB,GAAMG,GAAQF,IAEdE,GAAMC,eASND,EAAMR,OAASA,EC7BjB,QAASU,gBAAeZ,EAAOC,EAAQY,GASrC,QAASC,KACPd,EAAMc,SACHR,KAAK,WACJL,EAAOM,GAAG,gBAMhB,QAASQ,GAAYC,EAAGC,GACtBC,EAAKC,QAAU,MACXnB,EAAMoB,mBAAqBC,EAAgBC,SAASL,EAAQM,QAC9DP,EAAEQ,iBACFvB,EAAOM,GAAG,SACVW,EAAKC,QAAU,sCAGdnB,EAAMoB,oBACPF,EAAKO,SAAuC,WAA5BzB,EAAM0B,aAAaC,MA1BvC,GAAMT,GAAOV,KACPoB,EAAU5B,EAAM0B,aAChBrB,EAAOuB,CACbV,GAAKb,KAAOA,EAEZa,EAAKW,WAAa7B,EAAMoB,gBACxBF,EAAKC,QAAU,IASf,IAAME,IAAmB,YAezBR,GAAWiB,IAAI,oBAAqBf,GAEpCG,EAAKJ,OAASA,ECjChB,QAASiB,OAAMC,EAAWrC,GACxB,MAAO,IAAIqC,GAAarC,EAAjB,eAAyCsC,GAAI,SAClDC,QAAUC,OAAQ,SCEtB,QAASC,uBAAsBC,EAAMN,EAAO9B,EAAQD,GAclD,QAASsC,GAAYC,GACnBR,EAAMS,QAAQP,GAAIM,EAAMN,IAAK,WAC3B,GAAMQ,GAAQC,EAAYC,IAAIC,QAAQL,EACtCG,GAAYC,IAAIE,OAAOJ,EAAO,GAC9BxC,EAAOM,GAAG,iBAId,QAASuC,GAAYP,GACnBQ,QAAQC,IAAI,WACZD,QAAQC,IAAIT,EAAMN,IAClBF,EAAMG,QAAQD,GAAIM,EAAMN,KAG1B,QAASgB,GAAWC,GAClBH,QAAQC,IAAI,WACZD,QAAQC,IAAIE,GACZA,EAAQC,eAAiBD,EAAQC,cAGnC,QAASC,GAAeb,GACtBQ,QAAQC,IAAI,WACZT,EAAMc,mBAAqBd,EAAMc,kBAnCnC,GAAMX,GAAclC,KACdoB,EAAU5B,EAAM0B,aAChBrB,EAAOuB,CACbc,GAAYrC,KAAOA,EAEnBqC,EAAYW,mBAAoB,EAEhCX,EAAYC,IAAMZ,EAAMuB,OAAQC,SAAUvD,EAAM0B,aAAaO,KAE7DI,EAAKmB,KAAKvB,GAAI5B,EAAK4B,KAAKwB,SAASnD,KAAK,SAACoD,GACrChB,EAAYiB,YAAcD,IA4B5BhB,EAAYO,WAAaA,EACzBP,EAAYF,OAASF,EACrBI,EAAYI,YAAcA,EAC1BJ,EAAYU,eAAiBA,EAK/B,QAASQ,qBAAoB7B,EAAO9B,GAMlC,QAAS4D,KAGP9B,EAAM+B,KAAKC,EAAUxB,MAAO,WAC1BtC,EAAOM,GAAG,iBATd,GAAMwD,GAAYvD,IAElBuD,GAAUxB,SACVwB,EAAUxB,MAAMyB,WAAa/D,EAAOgE,OAAOhC,GAS3C8B,EAAUF,OAASA,EChErB,QAASK,SAAQlC,EAAWrC,GAC1B,MAAO,IAAIqC,GAAarC,EAAjB,iBAA2CsC,GAAI,SACpDC,QAAUC,OAAQ,SCEtB,QAASgC,yBAAwBD,GAC/B,GAAME,GAAgB5D,IAEtB4D,GAAczB,IAAMuB,EAAQZ,QAK9B,QAASe,uBAAsBH,EAASjE,EAAQD,GAK9C,QAAS6D,KACP,GAAMjC,GAAU5B,EAAM0B,YACtBqB,SAAQC,IAAI,SACZD,QAAQC,IAAIpB,GAEZsC,EAAQJ,KAAKQ,EAAYpB,QAAS,WAChCjD,EAAOM,GAAG,mBAVd,GAAM+D,GAAc9D,IAEpB8D,GAAYpB,WAWZoB,EAAYT,OAASA,EAKvB,QAASU,wBAAuBL,EAASnC,EAAO9B,EAAQD,GAiBtD,QAASwE,KACPzB,QAAQC,IAAI,UACZyB,EAAavB,QAAQwB,SAASzC,GAAIwC,EAAavB,QAAQjB,IAAK,WAC1DhC,EAAOM,GAAG,mBAWd,QAASoE,KACP5C,EAAM+B,KAAKW,EAAalC,MAAO,WAC7BtC,EAAOM,GAAG,iBAhCd,GAAMkE,GAAejE,KACfoB,EAAU5B,EAAM0B,aAChBkD,EAAShD,EAAQK,EACvBc,SAAQC,IAAI4B,GACZH,EAAaI,cAAe,EAE5BX,EAAQV,IAAIvD,EAAOgE,QAAQR,SAASnD,KAAK,SAACoD,GACxCe,EAAavB,QAAUQ,EACvBX,QAAQC,IAAIyB,EAAavB,SACtBuB,EAAavB,QAAQ4B,OAAO7C,KAAO2C,IACpCH,EAAaI,cAAe,EAC5B9B,QAAQC,IAAIyB,EAAavB,QAAQ4B,OAAO7C,IACxCc,QAAQC,IAAIyB,EAAaI,iBAW7BJ,EAAajC,OAASgC,EACtBC,EAAa5C,WAAa7B,EAAMoB,gBAEhCqD,EAAalC,OACXyB,WAAY/D,EAAOgE,OAAOhC,IAS5BwC,EAAaE,YAAcA,EAK7B,QAASI,wBAAuBb,EAASjE,EAAQD,GAK/C,QAASkC,KACPgC,EAAQhC,QAAQD,GAAI+C,EAAa9B,QAAQjB,IAAK+C,EAAa9B,QAAS,WAClEjD,EAAOM,GAAG,eAAgBN,EAAOgE,UANrC,GAAMe,GAAexE,IAErBwE,GAAa9B,QAAUgB,EAAQV,IAAIvD,EAAOgE,QAQ1Ce,EAAa9C,OAASA,EACtB8C,EAAanD,WAAa7B,EAAMoB,gBCrFlC,QAAS6D,QAAOC,EAAgBC,GAC9BD,EAGGE,MAAM,cACLC,IAAK,SACLC,YAAa,6BACbC,WAAY,uCAEbH,MAAM,YACLC,IAAK,YACLC,YAAa,2BACbC,WAAY,mCAEbH,MAAM,SACLC,IAAK,SACLC,YAAa,wBACbC,WAAY,6BAEbH,MAAM,aACLC,IAAK,aACLC,YAAa,4BACbC,WAAY,qCAEbH,MAAM,aACLC,IAAK,kBACLC,YAAa,4BACbC,WAAY,qCAIbH,MAAM,iBACLC,IAAK,YACLC,YAAa,gCACbC,WAAY,6CAEbH,MAAM,eACLC,IAAK,gBACLC,YAAa,8BACbC,WAAY,yCAEbH,MAAM,gBACLC,IAAK,gBACLC,YAAa,+BACbC,WAAY,2CAEbH,MAAM,gBACLC,IAAK,qBACLC,YAAa,+BACbC,WAAY,2CAIbH,MAAM,eACLC,IAAK,UACLC,YAAa,8BACbC,WAAY,yCAEbH,MAAM,aACLC,IAAK,cACLC,YAAa,4BACbC,WAAY,qCAQhBJ,EAAmBK,UAAU,aCrE/B,QAASnD,MAAKL,EAAWrC,GACvB,MAAO,IAAIqC,GAAarC,EAAjB,cAAwCsC,GAAI,SACjDC,QAAUC,OAAQ,SCAtB,QAASsD,sBAAqBpD,GAC5B,GAAMqD,GAAalF,IACnBkF,GAAW/C,IAAMN,EAAKiB,QAIxB,QAASqC,qBAAoBtD,EAAMpC,EAAQD,GAKzC,QAAS4F,KACPC,EAAUxF,KAAKqE,QAAQ,WACrBzE,EAAOM,GAAG,mBANd,GAAMsF,GAAYrF,IAElBqF,GAAUxF,KAAOgC,EAAKmB,IAAIvD,EAAOgE,QAQjC4B,EAAUrD,OAASoD,EACnBC,EAAUhE,WAAa7B,EAAMoB,gBAI/B,QAAS0E,qBAAoBzD,EAAMpC,EAAQD,GAKzC,QAASkC,KACPG,EAAKH,QAAQD,GAAI8D,EAAU1F,KAAK4B,IAAK8D,EAAU1F,KAAM,WACnDJ,EAAOM,GAAG,YAAaN,EAAOgE,UANlC,GAAM8B,GAAYvF,IAElBuF,GAAU1F,KAAOgC,EAAKmB,IAAIvD,EAAOgE,QAQjC8B,EAAU7D,OAASA,EACnB6D,EAAUlE,WAAa7B,EAAMoB,gBTxC/B4E,QAAQC,OAAO,gBAAiB,aAAc,YAAa,eACxDC,SAAS,UAAW,6BACpBC,OAAO1G,MAEVA,KAAK2G,SAAW,gBAAiB,WCJjCJ,QAAQC,OAAO,gBACZV,WAAW,qBAAsBxF,oBACjCwF,WAAW,kBAAmB9E,iBAEjCV,mBAAmBqG,SAAW,QAAS,UAgBvC3F,gBAAgB2F,SAAW,QAAS,UCpBpCJ,QAAQC,OAAO,gBACZV,WAAW,iBAAkB3E,gBAEhCA,eAAewF,SAAW,QAAQ,SAAU,cCH5CJ,QAAQC,OAAO,gBACZI,QAAQ,QAAStE,OAEpBA,MAAMqE,SAAW,YAAa,WCH9BJ,QAAQC,OAAO,gBACdV,WAAW,wBAAyBnD,uBACpCmD,WAAW,sBAAuB3B,qBAKnCxB,sBAAsBgE,SAAW,OAAO,QAAS,SAAU,SA+C3DxC,oBAAoBwC,SAAW,QAAS,UCtDxCJ,QAAQC,OAAO,gBACZI,QAAQ,UAAWnC,SAEtBA,QAAQkC,SAAW,YAAa,WCHhCJ,QAAQC,OAAO,gBACdV,WAAW,0BAA2BpB,yBACtCoB,WAAW,wBAAyBlB,uBACpCkB,WAAW,yBAA0BhB,wBACrCgB,WAAW,yBAA0BR,wBAGtCZ,wBAAwBiC,SAAW,WAQnC/B,sBAAsB+B,SAAW,UAAW,SAAS,SAmBrD7B,uBAAuB6B,SAAW,UAAW,QAAS,SAAU,SA0ChErB,uBAAuBqB,SAAW,UAAU,SAAU,SC5EtDJ,QAAQC,OAAO,gBACZE,OAAOlB,QAEVA,OAAOmB,SAAW,iBAAkB,sBCHpCJ,QAAQC,OAAO,gBACZI,QAAQ,OAAQhE,MAEnBA,KAAK+D,SAAW,YAAa,WCH7BJ,QAAQC,OAAO,gBACZV,WAAW,uBAAwBE,sBACnCF,WAAW,sBAAuBI,qBAClCJ,WAAW,sBAAuBO,qBAErCL,qBAAqBW,SAAW,QAMhCT,oBAAoBS,SAAW,OAAO,SAAU,SAgBhDN,oBAAoBM,SAAW,OAAO,SAAU","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('productsIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth','$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n  const payload = $auth.getPayload();\n  const user = payload;\n  main.user = user;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n    // Check whether or not the current user is a seller\n    if($auth.isAuthenticated()){\n      main.isSeller = $auth.getPayload().role === 'seller';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Order', Order);\n\nOrder.$inject = ['$resource', 'API_URL'];\nfunction Order($resource, API_URL) {\n  return new $resource(`${API_URL}/orders/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('OrdersIndexController', OrdersIndexController)\n.controller('OrdersNewController', OrdersNewController);\n// .controller('OrdersShowController', OrdersShowController);\n// .controller('OrdersEditController', OrdersEditController);\n\n//INDEX\nOrdersIndexController.$inject = ['User','Order', '$state', '$auth'];\nfunction OrdersIndexController(User, Order, $state, $auth) {\n  const ordersIndex = this;\n  const payload = $auth.getPayload();\n  const user = payload;\n  ordersIndex.user = user;\n\n  ordersIndex.showEditFormValue = false;\n\n  ordersIndex.all = Order.query({ buyer_id: $auth.getPayload().id });\n\n  User.get({id: user.id}).$promise.then((data) => {\n    ordersIndex.currentUser = data;\n  });\n\n  function deleteOrder(order) {\n    Order.delete({id: order.id}, () => {\n      const index = ordersIndex.all.indexOf(order);\n      ordersIndex.all.splice(index, 1);\n      $state.go('ordersIndex');\n    });\n  }\n\n  function updateOrder(order) {\n    console.log('clicked');\n    console.log(order.id);\n    Order.update({id: order.id});\n  }\n\n  function showOrders(product) {\n    console.log('clicked');\n    console.log(product);\n    product.showOrderList = !product.showOrderList;\n  }\n\n  function toggleEditForm(order) {\n    console.log('clicked');\n    order.showEditFormValue = !order.showEditFormValue;\n  }\n\n  ordersIndex.showOrders = showOrders;\n  ordersIndex.delete = deleteOrder;\n  ordersIndex.updateOrder = updateOrder;\n  ordersIndex.toggleEditForm = toggleEditForm;\n}\n\n//NEW\nOrdersNewController.$inject = ['Order', '$state'];\nfunction OrdersNewController(Order, $state) {\n  const ordersNew = this;\n\n  ordersNew.order = {};\n  ordersNew.order.product_id = $state.params.id;\n\n  function create() {\n    // const payload = $auth.getPayload();\n\n    Order.save(ordersNew.order, () => {\n      $state.go('ordersIndex');\n    });\n  }\n  ordersNew.create = create;\n}\n\n// //SHOW & DELETE\n// OrdersShowController.$inject = ['Order','$state', '$auth'];\n// function OrdersShowController(Order, $state, $auth) {\n//   const ordersShow = this;\n//   const payload = $auth.getPayload();\n//   const userId = payload.id ;\n//   console.log(userId);\n//\n//   ordersShow.Order = Order.get($state.params);\n//\n//   ordersShow.isLoggedIn = $auth.isAuthenticated;\n// }\n","angular.module('finalProject')\n  .factory('Product', Product);\n\nProduct.$inject = ['$resource', 'API_URL'];\nfunction Product($resource, API_URL) {\n  return new $resource(`${API_URL}/products/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ProductsIndexController', ProductsIndexController)\n.controller('ProductsNewController', ProductsNewController)\n.controller('ProductsShowController', ProductsShowController)\n.controller('ProductsEditController', ProductsEditController);\n\n//INDEX\nProductsIndexController.$inject = ['Product'];\nfunction ProductsIndexController(Product) {\n  const productsIndex = this;\n\n  productsIndex.all = Product.query();\n}\n\n//NEW\nProductsNewController.$inject = ['Product', '$state','$auth'];\nfunction ProductsNewController(Product, $state, $auth) {\n  const productsNew = this;\n\n  productsNew.product = {};\n\n  function create() {\n    const payload = $auth.getPayload();\n    console.log('fired');\n    console.log(payload);\n\n    Product.save(productsNew.product, () => {\n      $state.go('productsIndex');\n    });\n  }\n  productsNew.create = create;\n}\n\n//SHOW & DELETE\nProductsShowController.$inject = ['Product', 'Order', '$state', '$auth'];\nfunction ProductsShowController(Product, Order, $state, $auth) {\n  const productsShow = this;\n  const payload = $auth.getPayload();\n  const userId = payload.id;\n  console.log(userId);\n  productsShow.isOwnProduct = false;\n\n  Product.get($state.params).$promise.then((data) => {\n    productsShow.product = data;\n    console.log(productsShow.product);\n    if(productsShow.product.seller.id === userId) {\n      productsShow.isOwnProduct = true;\n      console.log(productsShow.product.seller.id);\n      console.log(productsShow.isOwnProduct);\n    }\n  });\n\n  function deleteProduct() {\n    console.log('fired!');\n    productsShow.product.$remove({id: productsShow.product.id}, () => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsShow.delete = deleteProduct;\n  productsShow.isLoggedIn = $auth.isAuthenticated;\n\n  productsShow.order = {\n    product_id: $state.params.id\n  };\n\n  function createOrder() {\n    Order.save(productsShow.order, () => {\n      $state.go('ordersIndex');\n    });\n  }\n\n  productsShow.createOrder = createOrder;\n}\n\n//EDIT CONTROLLER\nProductsEditController.$inject = ['Product','$state', '$auth'];\nfunction ProductsEditController(Product, $state, $auth) {\n  const productsEdit = this;\n\n  productsEdit.product = Product.get($state.params);\n\n  function update() {\n    Product.update({id: productsEdit.product.id}, productsEdit.product, () => {\n      $state.go('productsShow', $state.params);\n    });\n  }\n\n  productsEdit.update = update;\n  productsEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n\n  //User, Register and Login Routes\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n\n  //Product Routes\n    .state('productsIndex', {\n      url: '/products',\n      templateUrl: '/templates/productsIndex.html',\n      controller: 'ProductsIndexController as productsIndex'\n    })\n    .state('productsNew', {\n      url: '/products/new',\n      templateUrl: '/templates/productsNew.html',\n      controller: 'ProductsNewController as productsNew'\n    })\n    .state('productsShow', {\n      url: '/products/:id',\n      templateUrl: '/templates/productsShow.html',\n      controller: 'ProductsShowController as productsShow'\n    })\n    .state('productsEdit', {\n      url: '/products/:id/edit',\n      templateUrl: '/templates/productsEdit.html',\n      controller: 'ProductsEditController as productsEdit'\n    })\n\n  //Order Routes\n    .state('ordersIndex', {\n      url: '/orders',\n      templateUrl: '/templates/ordersIndex.html',\n      controller: 'OrdersIndexController as ordersIndex'\n    })\n    .state('ordersNew', {\n      url: '/orders/new',\n      templateUrl: '/templates/ordersNew.html',\n      controller: 'OrdersNewController as ordersNew'\n    });\n    // .state('ordersShow', {\n    //   url: '/orders/:id',\n    //   templateUrl: '/templates/ordersShow.html',\n    //   controller: 'OrdersShowController as ordersShow'\n    // });\n\n  $urlRouterProvider.otherwise('/products');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User','$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('productsIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User','$state', '$auth'];\nfunction UsersEditController(User, $state, $auth) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    User.update({id: usersEdit.user.id}, usersEdit.user, () => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  usersEdit.update = update;\n  usersEdit.isLoggedIn = $auth.isAuthenticated;\n}\n"]}